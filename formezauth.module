<?php



/**
 * Implements hook_help().
 */
function formezauth_help($path, $arg) {

  $output = '';  //declare your output variable
  switch ($path) {
    case "admin/help#formezauth":
      $output = '<p>'.  t("Modulo di autenticazione tramite FormezAuth") .'</p>';
      break;
  }
  return $output;
} 



/**
 * Implements hook_menu().
 *
 * @see formezauth_form()
 */
function formezauth_menu() {

  $items = array();

  $items['admin/config/services/formezauth'] = array(
    'title' => 'FormezAuth',
    'description' => 'Configurazione dell\'autenticazione tramite FormezAuth',
    'page callback' => '_formezauth_hello',
    'access arguments' => array('access administration pages'),
    'weight'=>0,
    'type' => MENU_NORMAL_ITEM,
  );


  $items['admin/config/services/formezauth/init'] = array(
    'title' => 'Variabili FormezAuth',
    'description' => 'Variabili',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('formezauth_form'),
    'access arguments' => array('access administration pages'),
    'weight'=>5,
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/services/formezauth/map'] = array(
    'title' => 'Mappatura campi',
    'description' => 'Mappatura dei campi FormezAuth con i campi resi disponibili sul server',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('formezauth_form2'),
    'access arguments' => array('access administration pages'),
    'weight'=>10,
    'type' => MENU_LOCAL_TASK,
  );

  /*
  $items['admin/config/services/formezauth/test'] = array(
    'title' => 'Test',
    'description' => 'Pagina di test',
    'page callback' => '_formezauth_test_page1',
    'access arguments' => array('access administration pages'),
    'weight'=>30,
    'type' => MENU_LOCAL_TASK,
  );
	*/

  $items['admin/config/services/formezauth/fields'] = array(
    'title' => 'Campi disponibili',
    'description' => 'Documentazione dei campi disponibili dal server, tramite interrogazione al file doc/fields',
    'page callback' => '_formezauth_server_fields',
    'access arguments' => array('access administration pages'),
    'weight'=>20,
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/services/formezauth/refresh_fields'] = array(
    'title' => 'Campi disponibili',
    'description' => 'Aggiornamento e documentazione dei campi disponibili dal server, tramite interrogazione al file doc/fields',
    'page callback' => '_formezauth_refresh_server_fields',
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Pagina di istruzioni per l'amministratore
 */
function _formezauth_hello(){

	global $base_url;

	// Atteso: 1
	$user_register=variable_get('user_register');
	$skip_verification=variable_get('formezauth_account_create');


	if($user_register!=1 && $skip_verification==0){

		drupal_set_message('La configurazione degli utenti non è impostata in modo coerente per FormezAuth. Leggi sotto per i dettagli','warning');
	}

	if(!$skip_verification){
		$stato_user='<strong>DISABILITATO</strong>.<br />';
		$stato_user.="Vai sulla <a href=\"".$base_url."/admin/config/people/accounts\">configurazione degli utenti</a> 
		per modificare la configurazione.";
	}
	else{
		$stato_user='<strong>ABILITATO</strong>.';
	}

	$out="<h2>Configurazione modulo FormezAuth</h3>\n";

	$out.="<p>FormezAuth è un modulo che permette l'autenticazione tramite OAuth del server Formez<br />
	Per utilizzare il modulo sono necessari i seguenti passaggi:</p>
	
	<h3>1. Richiedere una <em>OAuth Consumer Key</em> e <em>OAuth Consumer Secret</em></h3>
	<p>Queste devono essere richieste all'amministratore del sistema FormezAuth. 
	Scrivi a <a href=\"mailto:webmaster@formez.it\">webmaster@formez.it</a> per fartene fornire una.<br />
	Una volta ottenute le Consumer Key e Consumer Secret devi inserirle negli omonimi campi del
	<a href=\"".$base_url."/admin/structure/oauthconnector/formezauth/edit\">connettore FormezAuth</a>.</p>

	<h3>2. Configurazione degli utenti e dei permessi</h3>
	<p>E' necessario abilitare il permesso <em>Connect with formezauth</em> per l'<em>anonymous</em>.
	<p>FormezAuth può autenticare gli utenti anche se attualmente le politiche del sito
	non permettono la creazione diretta di nuovi utenti.<br />
	Per fare questo è necessario impostare il checkbox nella configurazione utente,
	sulla variabile <strong><em>permetti la creazione di account da FormezAuth</em></strong>. <br />
	Attualmente questo è ".$stato_user.".</p>

	<h3>3. Mappatura dei campi</h3>
	<p>Di default la connessione di FormezAuth trasferisce il <em>nickname</em> (<em>Drupal name</em>) e l'<em>email</em>.<br />
	Sono disponibili molti altri campi: se si vogliono trasferire su questo sito anche altri campi, è necessario
	eseguire la <a href=\"".$base_url."/admin/config/services/formezauth/map\">mappatura dei campi disponibili</a>.
	I campi mappati saranno aggiornati <strong>ad ogni accesso dell'utente</strong>.</p>

	<h3>4. Creazione del blocco FormezAuth Login</h3>
	<p>Il modulo FormezAuth mette a disposizione un blocco per il login, di default disabilitato.
	Vai nel <a href=\"".$base_url."/admin/structure/block\">menu Blocchi</a> per abilitarlo 
	(ad esempio nella <em>sidebar first</em>).
	ed imposta la <strong>visibilità</strong> solo per <strong>gli utenti anonimi</strong>.<br />
	L'etichetta del pulsante è personalizzabile dalle <a href=\"".$base_url."/admin/config/services/formezauth/init\">variabili FormezAuth</a>.
	Il blocco è visibile solo se il permesso <em>Connect with formezauth</em> è abilitato per gli anonimi.</p>

	<h3>Delegare il controllo degli utenti a FormezAuth</h3>
	<p>E' possibile disabilitare la modifica degli utenti su questo sito,
	facendo sì che possano operare le modifiche sull'account solo su FormezAuth.
	<br />
	Per farlo è necessario abilitare l'opzione <strong>Disabilita la modifica locale dei campi del profilo</strong>.<br />
	Attenzione: in questo caso non sarà possibile operare sul profilo da parte degli utenti</p>.
	";

	return $out;
}


/**
 * Pagina di test: non serve a nulla se non in fase di sviluppo
 * per testare cose.
 */
function _formezauth_test_page1(){

	global $user;

	//$provider=oauthconnector_provider_load('formezauth');
  if(function_exists('profile2_load_by_user')){
  	$profile=profile2_load_by_user($user);
  }
  dsm($profile);
  dsm($user);
  $u = user_load($user->uid);
  dsm($u);
	$out="";
	return $out;
}



/**
 * Callback di admin/config/services/formezauth/refresh_fields
 * Popola la tabella formezauth_server_map che a sua volta popola le 
 * tendine con i campi disponibili inviati dal server.
 *
 * @TODO: mostrare il numero di colonne cambiate in caso di sincronizzazione
 */
function _formezauth_refresh_server_fields($redirect=true){

  $url_server=variable_get('formezauth_server_addr');
  $url_server.= (substr($url_server,-1,1)=='/') ? "doc/fields" : "/doc/fields";

  if(function_exists('curl_init')){
    $ch = curl_init($url_server);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
    curl_setopt ($ch, CURLOPT_SSL_VERIFYHOST, 0);
    $file_content = (array) curl_exec($ch);
    curl_close($ch);
  }
  else{

    $file_content=@file($url_server);
  }

  if(!is_array($file_content)){

  	drupal_set_message(t('Errore nella configurazione del Server FormezAuth. Impossibile trovare la documentazione dei campi su @url', array('@url'=>$url_server)), 'error');
  }
  else{

  	$campi_server=json_decode(join('',$file_content));

		if(isset($campi_server->user) && is_object($campi_server->user)){

			foreach($campi_server->user as $nome=>$val){

				$nomi[]=$nome;
			}


	  	$q1=db_query("DELETE FROM {formezauth_server_map} WHERE fa_field NOT IN ('".implode("','",$nomi)."')");

	  	$q2=db_query("DELETE FROM {formezauth_fmap} WHERE fa_field NOT IN ('uid', 'mail','".implode("','",$nomi)."')");

	  	$affected_2=0;


	  	foreach($campi_server->user as $f=>$cc){

	  		//$q2[]=db_query("INSERT IGNORE INTO {formezauth_fmap} (fa_field) VALUES ('".$f."')");

				$affected_2+= db_merge('formezauth_server_map')
					  ->key(array(
					      'fa_field' => $f,

					  ))
					  ->fields(array(
					    'fa_field' => $f,
					    'info' => json_encode($cc)
					  ))->execute();
	  	}

	  	drupal_set_message(t('Campi aggiornati correttamente'));
	  }
	  else{
	  	drupal_set_message(t('Errore nella configurazione del Server FormezAuth. Impossibile eseguire il parsing su @url', array('@url'=>$url_server)), 'error');
	  }
	}

	if($redirect){
		drupal_goto('admin/config/services/formezauth/fields');
	}
}


/**
 *  Form per l'aggiornamento dei campi
 */
function _formezauth_refresh_fields($form, &$form_state) {
  // Submit

	$form['#action'] = url('admin/config/services/formezauth/refresh_fields');

	//$form_state['redirect']=url();

	$form['refresh'] = array(
	  '#type' => 'fieldset', 
	  '#title' => t('Sincronizzazione dei campi dal server'), 
	  '#weight' => 5, 
	  '#collapsible' => TRUE, 
	  '#collapsed' => FALSE,
	);

  $form['refresh']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Sincronizza ora',
  );
  
  return $form;
}

/**
 * Callback di admin/config/services/formezauth/refresh_fields
 * Popola la tabella formezauth_server_map che a sua volta popola le 
 * tendine con i campi disponibili inviati dal server.
 */
function _formezauth_server_fields(){

	// mostra il form
	$out='';
	$out.=drupal_render(drupal_get_form('_formezauth_refresh_fields'));

	// interroga la tabella
	$results=db_query("SELECT * FROM {formezauth_server_map} ");

  $header = array(t('Campo'), t('Nome'), t('Descrizione'), t('Tipo'));
	$rows = array();

  // Stampa la documentazione dei campi
  foreach($results as $row){

  	$desc=json_decode($row->info);

  	if(is_object($desc)){

	  	$rows[]=array(
	  		$desc->label,
	  		$row->fa_field,
	  		$desc->description,
	  		$desc->widget->module,
	  	);
	  }
	  else{

	  	$rows[]=array('',$row->fa_field,'','');
	  }
  }

  $out.="<h2>Campi disponibili sul server</h2>\n";
  $out.=theme('table', array('header' => $header, 'rows' => $rows));

  return $out;
}


function _formezauth_variabili_condivise(){

	$form['formezauth_account_create'] = array(
    '#type' => 'checkbox',
    '#title' => t('Permetti la creazione di account da FormezAuth'),
    '#default_value' => variable_get('formezauth_account_create', FALSE),
    '#description' => t('FormezAuth creeà automaticamente nuovi user accounts dopo avvenuta autenticazione a prescindere dai settaggi locali di creazione degli user accounts.'),
  );

/*
  $form['formezauth_disable_profile_change'] = array(
    '#type' => 'checkbox',
    '#title' => t('Disabilita la modifica locale dei campi del profilo'),
    '#default_value' => variable_get('formezauth_disable_profile_change', FALSE),
    '#description' => t('Se spuntata, questa opzione disabiliterà le modifiche del profilo da parte dell\'utente, che potrà modificare il suo profilo solo dal server FormezAuth.'),
  );
*/


	$options_reg = array(
	  1 => t('Disabilita la modifica locale dei campi sincronizzati'), 
	  2 => t('Disabilita la modifica locale di tutto il profilo'),
		0 => t('Permetti la modifica dei campi in locale (saranno comunque sovrascritti al login)'),
	);

  $form['registration_cancellation']['formezauth_disable_profile_change'] = array(
    '#type' => 'radios',
    '#title' => t('Modifica locale del profilo'),
    '#options' => $options_reg,
    '#default_value' => variable_get('formezauth_disable_profile_change', 1),
    '#description' => t('Definisce come gestire le modifiche del profilo da parte dell\'utente, che potrà modificare il suo profilo solo dal server FormezAuth.'),
  );

  return $form;
}


function _formezauth_sync_connector_new_url($new_provider_url){


/*
	$provider=oauthconnector_provider_load('formezauth');

	if(is_object($provider)){

		if (isset($provider->csid) && !empty($provider->csid)) {
	    $provider->consumer = DrupalOAuthConsumer::loadById($provider->csid, FALSE);
	    $provider->consumer_key=$provider->consumer->key;
	    $provider->consumer_secret=$provider->consumer->secret;
	  }

		$old_url=$provider->url;

		$provider->url=$new_provider_url;

		foreach($provider->mapping['fields'] as $k=>$field){

			$provider->mapping['fields'][$k]['resource']=str_replace($old_url, $new_provider_url, $provider->mapping['fields'][$k]['resource']);
		}

		$new_provider=oauthconnector_provider_save($provider);
	}
	*/
}

/**
 * Page callback
 *
 * @see formezauth_menu()
 */
function formezauth_form($form, &$form_state) {

  $form=array();

  $form['formezauth_server_addr'] = array(
    '#type' => 'textfield',
    '#title' => t('URL del server FormezAuth'),
    '#default_value' => variable_get('formezauth_server_addr'),
    '#size' => 60,
    '#maxlength' => 255,
    '#description' => t('Indirizzo del server FormezAuth.'),
    '#required' => TRUE,
  );
  $form['formezauth_block_submit_label'] = array(
    '#type' => 'textfield',
    '#title' => t('Etichetta del pulsante di accesso'),
    '#default_value' => variable_get('formezauth_block_submit_label', 'Accedi con FormezAuth'),
    '#size' => 60,
    '#maxlength' => 255,
    '#description' => t('Etichetta del pulsante del blocco FormezAuth.'),
    '#required' => FALSE,
  );
  $form['formezauth_debug_log_access'] = array(
    '#type' => 'checkbox',
    '#title' => t('Log di debug per l\'accesso dell\'utente'),
    '#default_value' => variable_get('formezauth_debug_log_access', FALSE),
    '#description' => t('Mostra il debug del log di accesso su watchdog.'),
  );
  $form['formezauth_open_in_popup'] = array(
    '#type' => 'checkbox',
    '#title' => t('Apri FormezAuth in un popup'),
    '#default_value' => variable_get('formezauth_open_in_popup', TRUE),
    '#description' => t('Se selezionato, il tasto di connessione a FormezAuth aprirà una finestrella (stile Twitter), in caso contrario il login avverrà nella finestra principale.'),
  );

  $json_image_styles=variable_get('formezauth_server_addr')."/doc/image_styles";


  if(function_exists('curl_init')){
    $ch = curl_init($json_image_styles);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
    curl_setopt ($ch, CURLOPT_SSL_VERIFYHOST, 0);
    $str_json_is = curl_exec($ch);
    curl_close($ch);
  }
  else{
    $str_json_is=file_get_contents($json_image_styles);
  }


  $obj=json_decode($str_json_is);

  $options['']=t('- Non importare le immagini -');

  if(is_object($obj)){
  	foreach($obj as $k=>$o){
  		$options[$o->path]=$k;
  	}
  }

  $form['formezauth_manage_image'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#title' => t('Modello per l\'importazione delle immagini utente'),
    '#default_value' => variable_get('formezauth_manage_image', ''),
    '#description' => t('Permette di scegliere il modello di immagine per dimensione.'),
  );


  $form+=_formezauth_variabili_condivise();

  // quando vengono aggiornate le variabili, devono essere aggiornati anche il connector
  if(count($form_state['input'])>0 && isset($form_state['input']['formezauth_server_addr'])){

  	// _formezauth_sync_connector_new_url($form_state['input']['formezauth_server_addr']);
  }

	return system_settings_form($form);
}




/**
 * Page callback
 * Chiamato dalla pagina admin/config/services/formezauth/map
 *
 */
function formezauth_form2($form, &$form_state) {

  $form=array();

  $HTML_INFO="
  <h2>Mappatura dei campi locali</h2>
  <p>Da qui è possibile mappare i propri campi (definiti nel profilo utente)
  con quelli trasmessi da FormezAuth.<br />
  I campi verranno aggiornati dal server al client (questa installazione Drupal) 
  ad ogni login dell'utente.<br />
  Nelle tendine sono mostrati i campi inviati dal server.</p>
  ";

  $form['info_h2'] = array(
		  '#markup' => $HTML_INFO
		);

  // Valori possibili: campi locali
//  $ffa=field_info_instances('user',NULL);
  $ffa=field_info_instances();

  $ff=array();
  foreach($ffa as $k=>$v){

  	if($k=='user'){
  		$ff['user']= (array) array_keys($v['user']);
  	}
  	else if(module_exists('profile2') && $k=='profile2'){

  		foreach($v as $kk=>$vv)
  		$ff[$kk]=(array) array_keys($vv);	
  	}
  }

  $campi_locali=$ff;

  if(is_array($ff) && count($ff)>0){
	  foreach($ff as $f){

	  	//$campi_locali[$f]=$f;
	  }
	}
	else{
		
		drupal_set_message(t('Nessun campo per il profilo di questo sito. <br />'
		  						.'Aggiungi dei campi al profilo per mappare i campi del server.'), 'warning');
	}





	$result = db_query("SELECT fa_field FROM {formezauth_server_map} ORDER BY fa_field");

	// prepara l'array con i default
	$fa_fields=array(
		''=>'', 
		'uid'=>'uid',
		'mail'=>'mail',
	);

	foreach ($result as $row) {
		$fa_fields[$row->fa_field]=$row->fa_field;
	}


	$result = db_query("SELECT local_field, fa_field, entity_type FROM {formezauth_fmap}");
	foreach ($result as $row) {
		$attuali[$row->local_field]= $row;
	}

  foreach($campi_locali as $category=>$campi){

  	$form['__'.$category]=array(
  			'#markup'=>'<h3>'.$category."</h3>\n",
  		); 

		foreach($campi as $label=>$local_k){

      $info_field=field_info_field($local_k);

      if(isset($info_field['columns']) && count($info_field['columns'])>1 ){

        foreach($info_field['columns'] as $col=>$colvalue){

          $default_v = (isset($attuali[$local_k.":".$col]->fa_field)) ? $attuali[$local_k.":".$col]->fa_field : '';

          // Perform operations on $record->title, etc. here.
          $form['ff['.$category.":".$local_k.':'.$col.']'] = array(
             '#type' => 'select',
             '#title' => " Mappatura ".$local_k.":".$col,
             '#options' => $fa_fields, 
             '#default_value' => $default_v,
             '#description' => t('Mappatura del campo locale :campo con i campi di FormezAuth.', array(":campo"=>$local_k.":".$col)),
            );
        }
      }
      else{

  	  	$default_v = (isset($attuali[$local_k]->fa_field)) ? $attuali[$local_k]->fa_field : '';


  	  	// Perform operations on $record->title, etc. here.
  		  $form['ff['.$category.":".$local_k.']'] = array(
  	       '#type' => 'select',
  	       '#title' => " Mappatura ".$local_k,
  	       '#options' => $fa_fields, 
  	       '#default_value' => $default_v,
  	       '#description' => t('Mappatura del campo locale :campo con i campi di FormezAuth.', array(":campo"=>$local_k)),
  				);
      }
	  }
	}

	$form['submit'] = array(
	    '#type' => 'submit',
	    '#value' => t('Save'),
	);

  //return system_settings_form($form);
	return $form;
}


function formezauth_form2_submit($form, &$form_data){

	$num_updated=0;
	$num_del=0;

	if(isset($form_data['input']['ff'])){

		// azzera i valori
		$num_del=db_query("DELETE FROM {formezauth_fmap}");

		foreach($form_data['input']['ff'] as $ff=>$fv){

			list($entity_type, $local_field)=explode(":", $ff,2);

			$num_updated+= db_insert('formezauth_fmap')
			  ->fields(array(
			    'local_field' => $local_field,
			    'fa_field' => $fv,
			    'entity_type' => $entity_type,
			  ))
			  ->execute();
		}
	}

	//drupal_set_message(t('Mappatura campi aggiornata: @num campi impostati', array('@num'=>$num_updated)));
	drupal_set_message(t('Mappatura campi aggiornata: campi impostati'));
}




/**
 * Implements validation from the Form API.
 * 
 * @param $form
 *   A structured array containing the elements and properties of the form.
 * @param $form_state
 *   An array that stores information about the form's current state 
 *   during processing.
 */
function formezauth_form_validate($form, &$form_state){

  $url_server = $form_state['values']['formezauth_server_addr'];
  if (!filter_var($url_server, FILTER_VALIDATE_URL)){
    form_set_error('formezauth_server_addr', t('L\'indirizzo del server deve essere una URL corretta, compreso http:// o https://'));
  }
  else if(substr($url_server, -1, 1)=='/'){
  	form_set_error('formezauth_server_addr', t('L\'indirizzo del server non deve avere lo slash finale'));
  }

}














/**
*	Implements hook_user_login
*
*
*   Funzione di mappatura dei campi da sovrascrivere ad ogni login (sincronizzazione)
*
**/
function formezauth_user_login (&$edit, $account) {

  global $user, $base_url;

  drupal_alter('formezauth_user_login_pre', $edit, $account);

  if(isset($_SESSION['oauth_user_data']) && is_array($_SESSION['oauth_user_data'])){

  	// Settings
  	// interroga la tabella per determinare i tipi
		$settings_info=db_query("SELECT * FROM {formezauth_server_map} ");
		$settings=array();
		foreach($settings_info as $ss){
			$desc=json_decode($ss->info);
			$settings[$ss->fa_field]=$desc->widget->type;
		}

  	
	  if(variable_get('formezauth_debug_log_access', 0)){
			watchdog('formezauth', 'Log accesso utente: %debug ', array('%debug' => json_encode($_SESSION['oauth_user_data'])), WATCHDOG_NOTICE);
		}

  	// map email from server
  	$edit['mail']=$_SESSION['oauth_user_data']['mail'];
  	$edit['status']=$_SESSION['oauth_user_data']['status'];
	
	// uuid
  	$edit['uuid']=$_SESSION['oauth_user_data']['uuid'];

  	// check Profile2
  	$profile_exists= (module_exists('profile2') && function_exists('profile2_load_by_user')) ? true:false;


	// Prende tutte le tipologie di profilo
  	$entity_types = db_query("SELECT DISTINCT entity_type FROM {formezauth_fmap} WHERE local_field!='' AND local_field IS NOT NULL ");

  	foreach($entity_types as $etype){

  		// prende i dati di mappatura campi USER
  		$result = db_query("SELECT fa_field, local_field, entity_type, col_default FROM {formezauth_fmap} WHERE local_field!='' AND local_field IS NOT NULL AND entity_type='".$etype->entity_type."'");

  		if($etype->entity_type=='user'){

  			foreach($result as $row){


						if($row->fa_field == 'uid' ||  $row->fa_field == 'mail'){
			  			$edit[$row->fa_field]= $_SESSION['oauth_user_data'][$row->fa_field];
			  		}
			  		
			  		else{

              if($row->fa_field=='') continue;


              // identifica campi con i due punti
              list($field, $column)=explode(":", $row->local_field);

              // campi singoli
              if($column==null){

                if($row->fa_field=='__default'){

                  $edit[$row->local_field][LANGUAGE_NONE][0]['value'] = $row->col_default;
                }
                else if(isset($_SESSION['oauth_user_data'][$row->fa_field][LANGUAGE_NONE][0]['value'])){
                  $edit[$row->local_field][LANGUAGE_NONE][0]['value'] = 
                    $_SESSION['oauth_user_data'][$row->fa_field][LANGUAGE_NONE][0]['value'];  
                }
              }

              // campi composti, come address field
              else{

                if($row->fa_field=='__default'){

                  $edit[$field][LANGUAGE_NONE][0][$column] = $row->col_default;
                }
                else if(isset($_SESSION['oauth_user_data'][$row->fa_field][LANGUAGE_NONE][0]['value'])){
                  
                  $edit[$field][LANGUAGE_NONE][0][$column] = 
                    $_SESSION['oauth_user_data'][$row->fa_field][LANGUAGE_NONE][0]['value'];

                }
              }

			  		}
  			}

				// https://auth.formez.eu/sites/default/files/styles/thumbnail/public/pictures/picture-22-1369253647.jpg	
				
				if(variable_get('formezauth_manage_image', '')!=''){

					if($_SESSION['oauth_user_data']['picture']['filename']!=''){
					  $manage =true;
					  $image = variable_get('formezauth_manage_image', '') . $_SESSION['oauth_user_data']['picture']['filename'];

					  $file_location = system_retrieve_file($image, 'public://pictures',$manage); 
					  $files = file_load(db_query('SELECT MAX(fid) FROM {file_managed}')->fetchField());
					  $picture_formezauth = new stdClass;
					  $picture_formezauth->fid=$files->fid;
					  $picture_formezauth->uid=$files->uid;
					  $picture_formezauth->filename=$files->filename;
					  $picture_formezauth->uri=$files->uri;
					  $picture_formezauth->filemime=$files->filemime;
					  $picture_formezauth->filesize=$files->filesize;
					  $picture_formezauth->status=$files->status;
					  $account->picture =$picture_formezauth;
					}

				}

        // Save the account
			  user_save($account, $edit);
			}


  		// Profile fields
  		else if($profile_exists){

  			$profile=profile2_load_by_user($account, $etype->entity_type);

  			if(!isset($profile->pid)){

		  		$profile = profile2_create(array('user' => $user, 'type' => $etype->entity_type));
    			profile2_save($profile);
    		}

  			foreach($result as $row){

		  		if(isset($_SESSION['oauth_user_data'][$row->fa_field][LANGUAGE_NONE][0]['value'])){

		  			$sess_val=$_SESSION['oauth_user_data'][$row->fa_field][LANGUAGE_NONE][0]['value'];
		  			$profile->{$row->local_field}[LANGUAGE_NONE][0]['value'] = $sess_val;
					}
				}
				profile2_save($profile);
  		}

  	}

  	watchdog('formezauth', 'Login e aggiornamento utente %username', array('%username' => $user->name), WATCHDOG_INFO);

	  unset($_SESSION['oauth_user_data']);

	  drupal_alter('formezauth_user_login_post', $edit, $account);
	}
        
}


/**
 * Implements hook_form_alter
 *
 * Se configurata la variabile, nasconde alcuni campi dalla modifica del profilo
 * ed impedisce di salvarlo (quindi di modificarlo) da client.
 * 
 * Serve per permettere una gestione degli utenti SOLO dal server FormezAuth
 * senza personalizzazione del client.
 * In questo caso è necessario far apparire un messaggio agli utenti per dire 
 * che si devono modificare il proprio profilo direttamente sul server.
 * @TODO Realizzare il messaggio per gli utenti
 */
function formezauth_form_alter(&$form, $form_state, $form_id) {

  if ($form_id == 'user_profile_form') {

  	global $user;

  	$serv_address=variable_get('formezauth_server_addr');

		$description_field="La modifica di questo campo è disabilitata da questo sito. Per modificare questo campo è necessario accedere al proprio profilo su <a href=\"".$serv_address."\">".$serv_address."</a>";

  	$formezauth_profile_policy=variable_get('formezauth_disable_profile_change', 1);

	  // check user id
	  if ($user->uid > 1) {

	  	// caso 2: disabilita i campi
	  	// @TODO: come disabilitare i campi di profile2?
	  	if($formezauth_profile_policy==2){

			  drupal_set_message('La modifica del proprio profilo da questo sito è <strong>disabilitata</strong> e può essere effettuata da <a href="'.$serv_address.'/user">FormezAuth</a>', 'warning');
			  
			  unset($form['#submit']);
			  unset($form['picture']);
			  unset($form['account']);
			  unset($form['locale']);
			  $form['actions']=array();

			  foreach($form as $ff=>$field){

			  	if(substr($ff,0,6)=='field_'){
			  		unset($form[$ff]);
			  	}
			  }

			}
			else if($formezauth_profile_policy==1){


				drupal_set_message('La modifica del proprio profilo da questo sito è <strong>limitata</strong>. Alcuni campi possono essere modificati da <a href="'.$serv_address.'/user">FormezAuth</a>', 'warning');

				$result = db_query("SELECT local_field, entity_type FROM {formezauth_fmap} 
					WHERE local_field!='' AND local_field IS NOT NULL ");

				foreach($result as $row){

					if(isset($form[$row->local_field])){
						$form[$row->local_field][LANGUAGE_NONE][0]['#disabled']=TRUE;

						// @TODO questo non sembra funzionare
						$form[$row->local_field]['#description']=$description_field;
						$form[$row->local_field][LANGUAGE_NONE]['#description']=$description_field;
						$form[$row->local_field][LANGUAGE_NONE][0]['#description']=$description_field;

					}
				}


			}
			else{

			}
	  }

  }

}


/**
 *
 * Questa non sembra funzionare... 
**/
function formezauth_form_profile2_form_alter(&$form, &$form_state) {
  // Your alterations.
}



/**
*  Implements hook__form_user_admin_settings_alter
* 
*    Crea un checkbox in Configurazione -> Account settings
*    admin/config/people/accounts
*  	 DA SPUNTARE per far funzionare.
*    Inoltre è necessario disabilitare la conferma dell'email dalla stessa pagina
**/ 
function formezauth_form_user_admin_settings_alter(&$form) {


  $form['registration_cancellation']['formezauth_account_create'] = array(
    '#type' => 'checkbox',
    '#title' => t('Permetti la creazione di account da FormezAuth'),
    '#default_value' => variable_get('formezauth_account_create', FALSE),
    '#description' => t('FormezAuth creeà automaticamente nuovi user accounts dopo avvenuta autenticazione a prescindere dai settaggi locali di creazione degli user accounts.'),
  );

  $form_add['registration_cancellation']=_formezauth_variabili_condivise();

  $form+=$form_add;
}



/**
 * Implements hook_default_oauthconnector_provider().
 */
function formezauth_default_oauthconnector_provider() {

	$providers = array();

	$provider = new stdClass();
	$provider->disabled = TRUE; /* Edit this to true to make a default provider disabled initially */
	$provider->name = 'formezauth';
	$provider->title = 'formezauth';
	$provider->url = variable_get('formezauth_server_addr');
	$provider->consumer_advanced = array(
	  'oauth2' => 0,
	  'signature method' => 'HMAC-SHA1',
	  'authentication realm' => '',
	  'request token endpoint' => '/oauth/request_token',
	  'authorization scope' => '',
	  'authorization endpoint' => '/oauth/authorize',
	  'access token endpoint' => '/oauth/access_token',
	);
	$provider->mapping = array(
	  'fields' => array(
	  	'uid' => array(
	      'resource' => $provider->url.'/oauthlogin/api/oauthlogin/info',
	      'method post' => 1,
	      'field' => 'uid',
	      'querypath' => FALSE,
	      'sync_with_field' => '',
	    ),
	    'mail' => array(
	      'resource' => $provider->url.'/oauthlogin/api/oauthlogin/info',
	      'method post' => 1,
	      'field' => 'mail',
	      'querypath' => FALSE,
	      'sync_with_field' => 'mail',
	    ),
	    'name' => array(
	      'resource' => $provider->url.'/oauthlogin/api/oauthlogin/info',
	      'method post' => 1,
	      'field' => 'name',
	      'querypath' => FALSE,
	      'sync_with_field' => 'name',
	    ),
	  ),
	  'format' => 'json',
	);

	$providers['formezauth'] = $provider;

  return $providers;
}


/**
 * ---------------------------------------
 *	BLOCCO FORMEZ AUTH per la connessione
 * ---------------------------------------
 */


/**
 * Implements hook_block_info().
 */
function formezauth_block_info() {
  $blocks = array();
  $blocks['formezauth_login'] = array(
    'info' => t('FormezAuth Login'),
    'cache' => DRUPAL_NO_CACHE,
  );
 
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function formezauth_block_view($delta='') {
  $block = array();
 
  switch($delta) {
    case 'formezauth_login' :
      $block['content'] = _formezauth_block_login();
      break;
  }
 
  return $block;
}

/**
 * Contenuto del blocco FormezAuth Login
 * Crea anche un punto di alter per permettere
 * personalizzazioni su 
 * hook_formezauth_block_login_alter
 */
function _formezauth_block_login(){

	global $base_url;

	$label_submit=variable_get('formezauth_block_submit_label', 'Accedi con FormezAuth');

	$out="<div class=\"formezauth-block-login\">";
  if(variable_get('formezauth_open_in_popup', TRUE) == TRUE){

    $js_button="window.open('".$base_url."/connect/oauthconnector_formezauth','','scrollbars=yes,resizable=yes,width=800,height=800', 'formezauth');";

    $out.="<input type=\"button\" value=\"".$label_submit."\" class=\"form-submit\" onclick=\"" . $js_button . "\" />\n";
  }
  else{
  	$out.="<form method=\"post\" action=\"".$base_url."/connect/oauthconnector_formezauth\">\n";
  	$out.="<input type=\"submit\" value=\"".$label_submit."\" class=\"form-submit\" />\n";
  	$out.="</form>\n";
  }
	$out.="</div>\n";

	$vars=array($base_url, $label_submit);

	drupal_alter('formezauth_block_login', $out, $vars);

	return $out;
}




/**
 * Implements oauthconnector_fetch_field_value
 * Aggiunge una creazione di sessione che sarà poi utilizzata in fase di login
 * @see formezauth_user_login()
 */
function formezauth_oauthconnector_fetch_field_value_alter($a, $b, $c){

  $_SESSION['oauth_user_data']=$b;
}




/**
 * Implements hook_connector_action_alter().
 *
 * We change the default connector to redirect to our own action.
 */
function formezauth_connector_action_alter(&$connector_actions) {
  
  $connector_actions['default']['create account callback'] = '_formezauth_create_account';
}




/**
* Funzione sostitutiva per la creazione dell'account
* Sostituisce _connector_create_account per usare la variabile 'formezauth_account_create'
* @see formezauth_connector_action_alter()
**/
function _formezauth_create_account($connector_name, $cid = NULL, $consumer = NULL, $access_token = NULL, $request_token = NULL) {

  $connector = _connector_get_connectors($connector_name);
  if (!$connector) {
    return FALSE;
  }
  $authname = $connector_name . '__' . $cid;

  if (variable_get('formezauth_account_create', FALSE) || variable_get('user_register', 1)) {
    $userinfo = array(
      'name' => $authname,
      'pass' => user_password(),
      'init' => $authname,
      'status' => variable_get('formezauth_account_create', FALSE) || variable_get('user_register', 1) == 1,
      'access' => REQUEST_TIME,
    );

    // Try to assign values from connection.
    $info = array();
    if (!empty($connector['information callback']) && is_callable($connector['information callback'])) {
      $info = $connector['information callback']($connector, $cid, array(), $access_token);
    }
    $allowed_fields = array('name', 'mail');

    foreach ($info as $field) {
      if (isset($field['sync']) && $field['sync'] && in_array($field['sync'], $allowed_fields)) {


        $exists = db_select('users', 'u')
          ->fields('u')
          ->condition($field['sync'], $field['value'])
          ->execute()
          ->rowCount();


        if ($exists == 1) {
          

          if($field['sync']==='name'){
          	$userinfo=user_load_by_name($field['value']);
          	if($userinfo!==false){
							break;
          	} 
          }
          else if($field['sync']==='mail'){
          	
          	$userinfo=user_load_by_mail($field['value']);
          	if($userinfo!==false) break;
          }
          else if($field['sync']==='uid'){

          	$userinfo=user_load($field['value']);
          	if($userinfo!==false) break;
          }

        }
        else{
        	$userinfo[$field['sync']] = $field['value'];
        }
      }
    }



    // se non esiste l'account ne crea uno vuoto coin i dati minimi
    if(is_array($userinfo)){
    	$new_account=user_save('', $userinfo);
    }


    // Terminate if an error occured during user_save().
    if (isset($userinfo->uid)){

    	return $userinfo;
    } 
    else if (!$new_account) {
      drupal_set_message(t("Error saving user account."), 'error');
    } 
    else {
      watchdog('user', 'New external user: %name using module %module.', array('%name' => $authname, '%module' => 'connector'), WATCHDOG_NOTICE, l(t('edit'), 'user/' . $new_account->uid . '/edit'));
      return $new_account;
    }
  }
  else {
    drupal_set_message(t('Only site administrators can create new user accounts.'), 'error');
    if (isset($connector['logout callback']) && is_callable($connector['logout callback'])) {
      call_user_func($connector['logout callback'], $connector, $connection->cid);
    }
  }
}


/**
 *  Carica il javascript che apre l'autenticazione nel popup
 *
 */
function formezauth_init($all_pages=true){

  // Check for front page
    if(drupal_is_front_page() || $all_pages){

      drupal_add_js( drupal_get_path('module', 'formezauth') . '/formezauth.js');
    }
}

// fine -- 
